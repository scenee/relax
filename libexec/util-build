#!/bin/bash -eu

###################
### Xcode Const ###
###################

export PROVISIONING_DST_DIR=~/Library/MobileDevice/Provisioning\ Profiles
export ARCHIVED_ENTITLEMENTS_XCENT=archived-expanded-entitlements.xcent

###################
### Xcode Utils ###
###################

export LATEST_ARCHIVE=
export LATEST_IPA=
export LATEST_EXPORT_DIR=

export PRODUCT_BUILD_ROOT=
export BUNDLE_VERSION=
export INFO_PLIST_PATH=
export XCODEBUILD_PID=

# read_path <release> <type>
read_path () {
	local release=$1
	local type=$2

	local data_root=$REL_RELEASE_ROOT/$release

	local path=""
	case $type in
	ipa)
		path="$(find "$data_root" -maxdepth 1 -mindepth 1 -name "*.ipa" -print0 \
		| xargs -0 stat -f"%m %N" | sort -rn \
		| head -1 | cut -d" " -f 2-)"
		;;
	build)
		path=$data_root
		;;
	archive)
		path="$(find "$data_root" -maxdepth 1 -mindepth 1 -name "*.xcarchive" -print0 \
		| xargs -0 stat -f"%m %N" | sort -rn \
		| head -1 | cut -d" " -f 2-)"
		;;
	esac

	if [[ -n "$path" ]]; then
		echo "$path"
	fi
}

# find_mobileprovision [-v] [--team <teamid>] [--latest] <provisioning-profile-name>
find_mobileprovision () {
	lspp "$@"
}

# dec_provisioning_profile <provisioning-profile> [-o <out>]
dec_provisioning_profile () {
	local infile outfile result
	while [ $# -ne 0 ];
	do
		arg="$1"
		shift
		case $arg in
		-o)
			outfile="$1"
			shift
			;;
		*)
			infile="$arg"
			;;
		esac
	done


	set  +e
	# `2>/dev/null` will get rid of this error output. 
	# 'security: SecPolicySetValue: One or more parameters passed to a function were not valid.'
	{
	if [[ -n "$outfile" ]]; then
		$SECURITY cms -D -i "$infile" -o "$outfile"
	else
		$SECURITY cms -D -i "$infile"
	fi
	} 2>/dev/null
	result=$?

	if [[ $result != 0 ]]; then
		die "No valid certificates for $infile"
	fi
	set -e
}

# print_progress_time <pid> [--quiet]
print_progress_time () {
	local pid quiet
	quiet=false

	while [[ $# != 0 ]];
	do
		arg="$1"
		shift
		case $arg in
		--quiet)
			quiet=true
			;;
		*)
			pid="$arg"
			;;
		esac
	done

	local delay=0.16666666 # 0.016666666 * 10
	local stime=$(date "+%s")
	local i=1

	(
		if [[ $quiet == false ]]; then
			# For a interrupt timing issue
			# Retore tty and tput
			trap "stty echo; tput cnorm; \
				__kill_bg_xcodebuid_task $XCODEBUILD_PID;" INT TERM EXIT

			star="$BOLD"'\xE2\x88\x97'"$NC"
			lbr="$BLUE[$NC"
			rbr="$BLUE]$NC"
			sp=("$lbr$star  $rbr"  "$lbr $star $rbr"  "$lbr  $star$rbr"  "$lbr $star $rbr")

			# Invisible cursor.
			tput civis
			# Don't echo back any chars typed.
			stty -echo
			while ps -p $pid | grep -q $pid; do
				now=$(date "+%s")
				dt=$(date -r "$(( $now - $stime ))" "+%s")
				if [[ $quiet == false ]]; then
					printf "\b${sp[i++%${#sp[*]}]} Time: ${dt}s\r"
				fi
				sleep $delay
			done

			tput el # Clear to end of line
			printf "Time: ${dt}s\n"
		fi
	)
	wait $pid || return 1
}

# progress_bar <pid>
progress_bar()
{
	local pid=$1
	local delay=0.75
	printf "["
	while ps -p $pid | grep -q $pid; do
		printf  "â–“"
		sleep $delay
	done
	if wait $pid; then
		printf "] done!\n"
		return 0
	else
		printf "]\n"
		return 1
	fi
}


__kill_bg_xcodebuid_task () {
	if [[ -n ${XCODEBUILD_PID} ]]; then
		if ps -p $XCODEBUILD_PID > /dev/null; then
			kill $XCODEBUILD_PID
		fi
	fi
}


# _is_distribution_profile <mobileprovision_file>
_is_distribution_profile () {
	local mobileprovision="$1"

	[[ -f "$mobileprovision" ]] || return

	temp_mobileprovision=$REL_TEMP_DIR/temp_mobileprovision

	dec_provisioning_profile "$mobileprovision" -o "$temp_mobileprovision"
	result=$?
	[[ $result = 0 ]] || return

	# Ref https://devforums.apple.com/message/84647#84647
	get_task_allow=$REL_TEMP_DIR/get-task-allow
	/usr/libexec/PlistBuddy -c "Print :Entitlements:get-task-allow" $temp_mobileprovision > $get_task_allow
	result=$?
	[[ $result = 0 ]] || return

	if cat "$get_task_allow" | grep -q false; then
		echo true
	else 
		echo false
	fi
}

# __check_scheme <params> <scheme>
__check_scheme () {
	local build_params
	__setup_build_params

	#if find ./ -name "$1".xcscheme |  grep '.*' > /dev/null; then
	if xcodebuild "${build_params[@]}" -list | sed -n '/Schemes/,$ p' | grep "$1" > /dev/null; then
		:
	else
		die "Not found '$1' scheme. Please have your scheme 'Shared' and add 'xcshareddata' folder in your SCM."
	fi
}

# Update global/local 'build_params' variable
__setup_build_params () {
	if [[ ${REL_CONFIG_workspace:-undefined} != "undefined" ]]; then
		build_params=( -workspace "$REL_CONFIG_workspace.xcworkspace" )
	else
		build_params=( -project "$REL_CONFIG_xcodeproj.xcodeproj" )
	fi
}

# __replace_development_team <team-id>
# PROJECT_FILE_PATH must be defined
__replace_development_team () {
	local team_id=$1
	local pbxproj="$PROJECT_FILE_PATH/project.pbxproj"

	if ! grep -q "DEVELOPMENT_TEAM = .*;" "$pbxproj"; then
		sed -i.temp'
			/PRODUCT_NAME = .*/a \
			DEVELOPMENT_TEAM = TGKEN7XA5C;\
		' "$pbxproj"
	else
		sed -i.temp -e "
		s:\(DEVELOPMENT_TEAM = \)\(.*\);:\1$_TEAM_ID;:g;
		s:\(DevelopmentTeam = \)\(.*\);:\1$_TEAM_ID;:g;
		" "$pbxproj"
	fi
	rm "${pbxproj}.temp"

	export DEVELOPMENT_TEAM=$_TEAM_ID
}

# get_build_base_params <scheme> [buildsettings=value] ...
get_build_params_file () {
	local scheme build_params xcode_build_params
	scheme="$1"
	shift

	xcode_build_params=$REL_TEMP_DIR/xcode_build_params
	rm -rf $xcode_build_params

	__setup_build_params

	build_params+=(-scheme "${scheme}")

	if test $# -gt 0; then
		for arg in "$@"
		do
			build_params+=( "$arg" )
		done
	fi
	
	[[ ${build_params[@]} =~ "-configuration" ]] || [[ -z $_CONFIGURATION ]] ||\
		build_params+=( -configuration "$_CONFIGURATION" )

	build_params+=( ONLY_ACTIVE_ARCH=NO DEBUG_INFORMATION_FORMAT=dwarf-with-dsym )

	if [[ ${_PROVISIONING_PROFILE:-undefined} != undefined ]]; then
		if is_xcode_version ">=" 8; then
			build_params+=( PROVISIONING_PROFILE_SPECIFIER="$_PROVISIONING_PROFILE" )
		fi

		if is_xcode_version ">=" 9; then
			build_params+=( CODE_SIGN_STYLE="Manual" )
		fi

		build_params+=( CODE_SIGN_IDENTITY="$_IDENTITY" )
	fi

	if test "${_BUILD_SETTINGS:-undefined}" != undefined; then
		if test ${#_BUILD_SETTINGS[@]} -gt 0; then
			for s in "${_BUILD_SETTINGS[@]}"; do
				build_params+=( "${s//\{\}/ }" )
			done
		fi
	fi

	for e in "${build_params[@]}"
	do
		echo "$e" >> $xcode_build_params
	done

	echo "$xcode_build_params"
}


# FIXME This function doesn't load all xcode build settings.
# load_xcode_build_settings [<xcode_build_params_file>]
__load_xcode_build_settings () {
	if test ! -d $REL_TEMP_DIR/xcode-settings; then
		mkdir -p $REL_TEMP_DIR/xcode-settings;
	fi

	local params=()
	if [[ $# = 1 ]]; then
		while read p
		do
			params+=( "$p" )
		done < $1
	fi

	unset 'params[${#params[@]}-1]' # Remove 'CODE_SIGN_IDENTITY' causing infinit loop on Xcode 9

	local filename="$(echo "${params[@]}"| shasum | cut -d ' ' -f1)"
	local xcode_settings_file="$REL_TEMP_DIR/xcode-settings/$filename"
	local xcode_settings_conf="${xcode_settings_file}.conf"

	if [[ ! -f $xcode_settings_file ]]; then
		local xcode_settings_error="$(mktemp $REL_TEMP_DIR/xcode-settings/XXXXXX)"

		logd "xcodebuild -showBuildSettings ${params[@]}"
		set +e
		xcodebuild -showBuildSettings "${params[@]}" 2>"$xcode_settings_error" >"$xcode_settings_file"
		set -e

		[[ -s "$xcode_settings_error" ]] && \
			logw "util-build.load_xcode_build_settings(): $(cat $xcode_settings_error)"

		# Get ride of 'DeveloperPortal: Using pre-existing current store at URL'
		cat "$xcode_settings_file" | tail -n +2 | \
		sed -e "
		s/^ *//;
		s/ = /='/;
		s/$/'/;
		" | \
		grep \
		-e "CONFIGURATION\|INFOPLIST_PATH\|PRODUCT_SETTINGS_PATH\|SRCROOT"\
		-e "PRODUCT_BUNDLE_IDENTIFIER\|DEVELOPMENT_TEAM"\
		-e "FULL_PRODUCT_NAME\|PRODUCT_NAME\|TARGETNAME"\
		-e "PROJECT_DIR\|PROJECT_FILE_PATH\|PROJECT_NAME"\
		-e "CODESIGNING_FOLDER_PATH\|BUILD_DIR\|TARGET_BUILD_DIR\|BUILT_PRODUCTS_DIR"\
		-e "OBJROOT\|PUBLIC_HEADERS_FOLDER_PATH" \
		-e "DWARF_DSYM_FILE_NAME\|DWARF_DSYM_FOLDER_PATH" \
		-e "CURRENT_PROJECT_VERSION" \
		-e "PRODUCT_TYPE" \
		-e "ENABLE_BITCODE" \
		| while read line
		do 
			logd "-- loading $line"
			echo "export $line" >> "$xcode_settings_conf"
		done
	fi

	if ! test -f "$xcode_settings_conf"; then
		die "Please check '$_SCHEME' scheme. '$_SCHEME' must be a 'Shared' scheme or add 'xcshareddata' folder in your repo."
	fi

	source "$xcode_settings_conf"
}

print_xcode_version() {
	xcodebuild -version | head -n 1 | awk '{ print  $2 }'
}

# check_xcode_version <operator> <version>
# For example: is_xcode_version "<=" 8
is_xcode_version() {
	local op="$1"
	local target="$2"
	local xcode_version="$(print_xcode_version)"
	if [[ $(echo "${xcode_version%%.*} $op $target" | bc) == 1 ]]; then
		return 0;
	else
		return 1;
	fi
}

get_info_plist_value () {
	local path=$1
	local info_plist=$2
	echo $(/usr/libexec/PlistBuddy -c \
		"Print $path" "$info_plist" 2>&1\
		| grep -v "Does Not Exist")
}

###############
# $1 -- command
# commands:
#     version
#     bundle_version 
#     bundle_name
#     bundle_identifier
#     bundle_identifier_prefix
# $2 -- info-plist
print_info_plist () {
	command=$1
	shift
	case $command in 
	version)
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleShortVersionString" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;

	bundle_name)
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleName" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_version) 
		echo $(/usr/libexec/PlistBuddy -c \
			"Print :CFBundleVersion" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_identifier)
		echo $(/usr/libexec/PlistBuddy -c\
			"Print :CFBundleIdentifier" "$1" 2>&1\
			| grep -v "Does Not Exist")
		;;
	bundle_identifier_prefix)
		local app_id=$(/usr/libexec/PlistBuddy -c\
			"Print :CFBundleIdentifier" "$1" 2>&1\
			| grep -v "Does Not Exist")
		echo "${app_id%.*}"
		;;
	*)
		usage
		die
		;;
	esac
}

# check_distribution <distribution>
check_distribution() {
	relparser -f "$REL_CONFIG_PATH" check "$1"
}

teardown_build () {
	set +u
	__kill_bg_xcodebuid_task

	if [[ -d "$SRCROOT" ]]; then
		find "${SRCROOT}" -name "*.${REL_BAK_EXT}" | \
		while read bak
		do
			cp "$bak" "${bak%.$REL_BAK_EXT}"
			rm "$bak"
		done
	fi
	set -u
}

# setup_build [--export <archive-path>] <release>
setup_build () {
	local for_export=false
	local archive_path archived_info_plist version

	case "$1" in
	--export) 
		for_export=true
		shift
		archive_path="$1"
		archived_info_plist="$archive_path"/Info.plist
		shift
		;;
	esac

	test -d $REL_TEMP_DIR || die "Not found Temporary directory"

	local release="$1"
	local stdtemp=$REL_TEMP_DIR/stdtemp

	[[ " ${REL_DISTRIBUTIONS[@]} " =~ " ${release} " ]] || die "'$release' is undefined."

	logi "$ARROW Set up '$release' distribution"

	################
	# Load Relfile #
	################
	config_load "$REL_CONFIG_PATH" "$release"

	test -n "$release" || die "'$release' distribution is not defined in Relfile"

	set +u
	test -z $_BUILD_SETTINGS && \
		readonly _BUILD_SETTINGS=( $(eval echo '$'{REL_CONFIG_${release}_build_settings[@]} ) )
	set -u

	__load_xcode_build_settings "$(get_build_params_file "$_SCHEME")"

	##########
	# Backup #
	##########

	cp -a "$PROJECT_FILE_PATH"/project.pbxproj "$PROJECT_FILE_PATH"/project.pbxproj.$REL_BAK_EXT
	# if [[ "${FULL_PRODUCT_NAME:-undefined}" = undefined ]]; then
	# 	die "This scheme($_SCHEME) isn't for an Application, Framework or Library target"
	# fi
	
	#@#########################################
	# Configure Info.plist and build settings #
	#@#########################################

	logi "Configuration: $CONFIGURATION"
	INFO_PLIST_PATH="$PRODUCT_SETTINGS_PATH"

	# StaticLibrary doesn't have a Info.plist
	if [ -z $INFO_PLIST_PATH ]; then
		PRODUCT_BUILD_ROOT="$REL_RELEASE_ROOT/$release"
		logi "Distribution path: $PRODUCT_BUILD_ROOT"
		mkdir -p "$PRODUCT_BUILD_ROOT"
		return
	fi
	cp "$INFO_PLIST_PATH" "$INFO_PLIST_PATH.$REL_BAK_EXT"

	if [[  "$PRODUCT_TYPE" ==  "com.apple.product-type.application" ]]; then
		test -n "$_PROVISIONING_PROFILE" || die "Relfile requires 'provisioning_profile' field for $release."
		if [[ "${_TEAM_ID:-undefined}" != undefined ]]; then
			__replace_development_team $_TEAM_ID
		fi
		# Team ID
		logi "Team ID: $_TEAM_ID"
	else
		if [[ ${_PROVISIONING_PROFILE:-undefined} != undefined ]]; then
			logw "Ignored 'provisioning_profile' field in Relfile because it's not needed for a library/framework build"
		fi
	fi

	logv "Info plist: $INFO_PLIST_PATH"
	config_gen_plist "$REL_CONFIG_PATH" "$release" "$INFO_PLIST_PATH.$REL_BAK_EXT" "$INFO_PLIST_PATH"

	# Bundle Identifier
	if [[ $for_export == true ]]; then
		PRODUCT_BUNDLE_IDENTIFIER="$(get_info_plist_value ":ApplicationProperties:CFBundleIdentifier" "$archived_info_plist")"
		if [[ -z "$PRODUCT_BUNDLE_IDENTIFIER" ]]; then
			PRODUCT_BUNDLE_IDENTIFIER="$(get_info_plist_value ":CFBundleIdentifier" "$archived_info_plist")"
		fi
	else
		# Support a Xcode project not having PRODUCT_BUNDLE_IDENTIFIER
		if test ${PRODUCT_BUNDLE_IDENTIFIER:-undefined} = undefined; then
			PRODUCT_BUNDLE_IDENTIFIER="$(print_info_plist bundle_identifier $INFO_PLIST_PATH)"
			if [[ $PRODUCT_BUNDLE_IDENTIFIER =~ (.*)\$[\({]PRODUCT_NAME:rfc1034identifier[\)}](.*) ]]; then
				PRODUCT_BUNDLE_IDENTIFIER="$(eval echo ${BASH_REMATCH[1]}$PRODUCT_NAME)"
				if [[ ! -z ${BASH_REMATCH[2]} ]]; then
					PRODUCT_BUNDLE_IDENTIFIER+="${BASH_REMATCH[2]}"
				fi
			fi
		else
			local info_plist_bundle_identifier="$(print_info_plist bundle_identifier "$INFO_PLIST_PATH")";

			# CFBundleIdentifier can be $(PRODUCT_BUNDLE_IDENTIFIER)
			if [[ "$info_plist_bundle_identifier" = "\$(PRODUCT_BUNDLE_IDENTIFIER)" ]]; then
				:
			# PRODUCT_BUNDLE_IDENTIFIER sometimes can be different from Info.plist
			else
				if [[ ${PRODUCT_BUNDLE_IDENTIFIER} != "$info_plist_bundle_identifier" ]]; then
					logi "$ERR PRODUCT_BUNDLE_IDENTIFIER($PRODUCT_BUNDLE_IDENTIFIER) setting is different from the value($info_plist_bundle_identifier) of CFBundleIdentifier in Info.plist."
					die "$NOTE Please edit 'Product Bundle Identifier' in '$PRODUCT_NAME' > 'Build Settings' pane."
				fi
			fi
		fi

		# Override CFBundleIdentifier from Relfile
		if [[ "${_BUNDLE_ID:-undefined}" != undefined ]]; then
			sed -i .temp \
			-e "s/\(PRODUCT_BUNDLE_IDENTIFIER = \)\($PRODUCT_BUNDLE_IDENTIFIER\);/\1$_BUNDLE_ID;/" \
			"$PROJECT_FILE_PATH"/project.pbxproj
			rm "$PROJECT_FILE_PATH"/project.pbxproj.temp

			/usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $_BUNDLE_ID" "$INFO_PLIST_PATH"

			PRODUCT_BUNDLE_IDENTIFIER=$_BUNDLE_ID
		fi
	fi
	logi "Bundle Identifier: $PRODUCT_BUNDLE_IDENTIFIER"

	if [[ ${_VERSION:-undefined} == undefined ]]; then
		BUNDLE_SHORT_VERSION="$(get_info_plist_value ":CFBundleShortVersionString" "$INFO_PLIST_PATH")"
	else
		BUNDLE_SHORT_VERSION="$_VERSION"
	fi

	## Bundle Version
	if [[ $for_export == true && "${_BUNDLE_VERSION:-undefined}" = undefined ]]; then
		BUNDLE_VERSION="$(get_info_plist_value ":ApplicationProperties:CFBundleVersion" "$archived_info_plist")"
		if [[ -z "$BUNDLE_VERSION" ]]; then
			BUNDLE_VERSION="$(get_info_plist_value ":CFBundleVersion" "$archived_info_plist")"
		fi
		BUNDLE_SHORT_VERSION="$(get_info_plist_value ":CFBundleShortVersionString" "$archived_info_plist")"
		if [[ -z "$BUNDLE_SHORT_VERSION" ]]; then
			BUNDLE_SHORT_VERSION="$(get_info_plist_value ":ApplicationProperties:CFBundleShortVersionString" "$archived_info_plist")"
		fi
	else
		local abbcommit=$(git log -1 --format='%h')
		local branch=$(git symbolic-ref --short HEAD)
		local config=$(echo $_CONFIGURATION | tr [:upper:] [:lower:])

		if test "${_BUNDLE_VERSION:-undefined}" = undefined; then
			BUNDLE_VERSION=$(print_info_plist bundle_version "$INFO_PLIST_PATH")
		else
			BUNDLE_VERSION=$_BUNDLE_VERSION
		fi

		# Replace special characters
		BUNDLE_VERSION=$(echo "$BUNDLE_VERSION" | awk '
		{
			gsub(/%c/, "'"$config"'");
			gsub(/%h/, "'"$abbcommit"'");
			gsub(/%b/, "'"${branch//\//_}"'");
			print
		}') # See [Semantic Versioning 2.0.0](http://semver.org)
	fi

	/usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $BUNDLE_SHORT_VERSION" "$INFO_PLIST_PATH"
	/usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUNDLE_VERSION" "$INFO_PLIST_PATH"

	if [[ $BUNDLE_VERSION =~ (.*)\$\(CURRENT_PROJECT_VERSION\)(.*) ]]; then
		BUNDLE_VERSION="${BASH_REMATCH[1]}${CURRENT_PROJECT_VERSION}${BASH_REMATCH[2]}"
	fi
	
	logi "Version: $BUNDLE_SHORT_VERSION"
	logi "Bundle Version: $BUNDLE_VERSION"

	## Product Distribution path
	PRODUCT_BUILD_ROOT=$(eval echo "$REL_RELEASE_ROOT/$release")

	logi "Distribution path: $PRODUCT_BUILD_ROOT"
	mkdir -p "$PRODUCT_BUILD_ROOT"

	## Switch to Manual Signing
	if is_xcode_version "==" 8; then
		if [[  "$PRODUCT_TYPE" ==  "com.apple.product-type.application" ]]; then
			if grep -q ProvisioningStyle "$PROJECT_FILE_PATH"/project.pbxproj; then
				sed -i .temp \
				-e "s/\(ProvisioningStyle = \)Automatic/\1Manual/" \
				"$PROJECT_FILE_PATH"/project.pbxproj
			else
				s='[[:space:] ]*'
				sed -i .temp \
				-e "s/\($s\)\(DevelopmentTeam = .*;\)/\1\2\\
				\1ProvisioningStyle = Manual;\
				/" "$PROJECT_FILE_PATH"/project.pbxproj
			fi
			rm "$PROJECT_FILE_PATH"/project.pbxproj.temp
			logi "$ARROW Switch to Manual signing with '$_PROVISIONING_PROFILE' provisioning profile"
		fi
	fi
}


# update_archived_expanded [-i <bundle_identifier>] <dest-team> <app-path>
update_archived_entitlements_xcent () {
	local _bundle_identifier
	case $1 in
		-i)
			shift
			_bundle_identifier=$1
			shift
			;;
	esac

	local _src_team
	local _dest_team=$1
	local _app_path=$2
	local _entitlements_xcent=$REL_TEMP_DIR/entitlements_xcent

	if [[ ! -f "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" ]]; then
		return
	fi

	#codesign -dv "${app_path}" 2>&1 | grep -e "Format\|Identifier\|Signed Time" > $REL_TEMP_DIR/codesign_info
	#local cs_team_id=$(cat $REL_TEMP_DIR/codesign_info | sed -ne "s/TeamIdentifier=\(.*\)/\1/p")

	local app_id=$(/usr/libexec/PlistBuddy -c "Print :application-identifier" "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" 2>/dev/null | grep -v "Does Not Exist")
	if [[ -z ${app_id} ]]; then
		logi "$WARN $ARCHIVED_ENTITLEMENTS_XCENT is empty."
		return
	fi

	logi "$ARROW Update $ARCHIVED_ENTITLEMENTS_XCENT. IPA file will be exported in $export_path"
	_src_team=${app_id%%.*}

	cp "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" "$_entitlements_xcent"

	logv "$ARROW Original $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_src_team)"
	cat "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT" | logv
	if [ -z $_bundle_identifier ]; then
		sed -i -e "s/$_src_team/$_dest_team/g" $_entitlements_xcent
	else
		sed -i -e \
		"\
		s/$_src_team\([^<][^<]*\)/$_dest_team.$_bundle_identifier/g; \
		s/$_src_team</$_dest_team</g; \
		" $_entitlements_xcent
	fi
	logv "$ARROW Updated $ARCHIVED_ENTITLEMENTS_XCENT(TeamID: $_dest_team)"
	cat $_entitlements_xcent | logv

	cp "$_entitlements_xcent" "$app_path/$ARCHIVED_ENTITLEMENTS_XCENT"
}

declare -x -f __kill_bg_xcodebuid_task
declare -x -f __check_scheme __replace_development_team __setup_build_params
declare -x -f __load_xcode_build_settings 

declare -x -f _is_distribution_profile

declare -x -f print_progress_time progress_bar
declare -x -f get_build_params_file
declare -x -f get_info_plist_value print_info_plist
declare -x -f print_xcode_version is_xcode_version
declare -x -f setup_build teardown_build
declare -x -f update_archived_entitlements_xcent
declare -x -f find_mobileprovision
declare -x -f read_path
declare -x -f dec_provisioning_profile
declare -x -f check_distribution
