#!/bin/bash -eu
# Usage: relax [--version] [--config <Relfile>] <command>

export REL_VERSION="0.6.7"

###################
### Environment ###
###################

export CMDPATH=$(test -L ${BASH_SOURCE[0]:-$0} && echo $(readlink ${BASH_SOURCE[0]:-$0}) || echo $0)
export ME=$(basename $CMDPATH)

find_source_path() {
	cd "$(dirname "${BASH_SOURCE[0]:-$0}")"
	cd "$(dirname "$(readlink "${BASH_SOURCE[0]:-$0}")")"
	cd "$PWD/.."
	echo $PWD
}

export SOURCE_PATH="$(find_source_path)"
export PATH="$SOURCE_PATH/libexec:$PATH"
export LIBEXEC_DIR="$SOURCE_PATH/libexec"

# Set a value dynamically
export REL_LOG_LEVEL=
export REL_DISTRIBUTIONS=
export REL_CONFIG_PATH=

set +u
if [[ -z ${NOCOLOR} ]]; then
	export NOCOLOR=false
fi
set -u

################
### Includes ###
################

source const
source color
source util
source util-build
source util-config
source util-completions
source util-keychain

#################
### Functions ###
#################

usage () {
	cat <<-EOM
	Usage: ${ME} [option] <command|module> ...

	Options:
	    -v		Be verbose when executing commands
	    -h		Show help

	Commands:
	    init	Set up $ME 
	    archive	Create an archive file
	    build	Make a framework bundle from a static library
	    export	Export an ipa file
	    show	Print the latest archive/ipa file path.
	    package	Make artifact package 
	    resign	Resign an .ipa file
	    upload	Upload an ipa file to a distribution service(i.e. Crashlytics Beta)
	    validate	Print the embedded provisioning profile and entitlements of an app
	    symbolicate	Symbolicate a crash log with the related archive
	    help	Show help

	Modules:
	    keychain	See 'relax keychain help'
	    profile	See 'relax profile help'
	EOM
	fin
}

### Main ###

if [ $# = 0 ]; then
	usage
fi


while true;
do
	case $1 in
	-v)
		REL_LOG_LEVEL=$REL_LOG_LEVEL_VERBOSE
		shift
		;;
	-vvv)
		REL_LOG_LEVEL=$REL_LOG_LEVEL_DEBUG,$REL_LOG_LEVEL_VERBOSE
		set -x
		shift
		;;
	-f)
		shift
		REL_CONFIG_PATH=$1
		shift
		;;
	--no-color)
		export NOCOLOR=true
		source color
		shift
		;;
	-h|--help)
		usage
		;;
	*)
		break
		;;
	esac
done
[ $# != 0 ] || usage

command=$1
shift
case $command in 
"")
	usage
	;;
* )
	module_path=""
	command_path="$(command -v "relax-$command" || true)"
	if ! [ -n "$command_path" ]; then
		module=$command
		export PATH="$SOURCE_PATH/libexec/$module:$PATH"
		module_path="$(command -v "$module" || true)"
		if ! [ -n "$module_path" ]; then
			die "No such command \`$command'"
		elif grep -q "relax" <<< "$module_path"; then
			"$module_path" "$@"
		else
			die "No such command \`$command'"
		fi
	else
		[[ $command != "help" ]] || exec "$command_path" "$@"
		check_toolchain

		case $command in
		build|archive|export|upload|package|show|completions|apply|dist)
			[[ -n $REL_CONFIG_PATH  ]] || REL_CONFIG_PATH="$(config_find)"
			REL_DISTRIBUTIONS="$(config_get_distributions $REL_CONFIG_PATH | tr '\r\n' ' ')"
			;;
		*)
			;;
		esac

		[[ ! "$@" =~ "--completions" ]] || exec "$command_path" "$@"

		case $command in
		commands|completions|show|ls-certs)
			;;
		*)
			TRAP "clean_temp;"
			make_temp
			;;
		esac

		"$command_path" "$@"
	fi
	;;	
esac
