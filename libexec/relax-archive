#!/bin/bash -eu
# @(#) relax: `archive` command
# completions

usage () {
	cat <<-EOM
	Usage: ${ME} archive <distribution>  [-c <configuration>] [--progress] [--no-cache] [<xcodebuild-option>] ...

	Options:
	    -c		Specify a configuration
	    --no-cache	Remove a DerivedData of the scheme
	    --progress	Show a progress indicator
	EOM
	fin
}

# __find_xcscheme <scheme>
__find_xcscheme ()  {
	find . -name "$1.xcscheme" \
	| while IFS= read file
	do
		if echo "$file" | grep "xcodeproj"; then
			break
		fi
	done
}

set_archive_config () {
	if [[ ! $# = 2 ]]; then 
		die "Fail to $FUNCNAME(): Bad argument"
	fi

	local xcscheme_path="$1"
	local configuration="$2"

	if [[ ! -f "$xcscheme_path" ]]; then
		die "$FUNCNAME(): not found $xcscheme_path"
	fi

	logv "Set \""$_CONFIGURATION"\" to BuildConfiguration in scheme: $xcscheme_path"
	sed -i."$REL_BAK_EXT" "/<ArchiveAction/,/<\/ArchiveAction>/s/buildConfiguration = \".*\"/buildConfiguration = \"$_CONFIGURATION\"/" "$xcscheme_path"
}

# make_archive <archive_path>
make_archive () {
	local archive_path="$1"
	shift

	### Update 'Configuration' in a xcscheme ###
	local xcscheme_path="$(__find_xcscheme "$_SCHEME")"
	if [[ -n "$xcscheme_path" ]]; then
		set_archive_config "$xcscheme_path" "$_CONFIGURATION"
		cp "$xcscheme_path" "$PRODUCT_BUILD_ROOT/${xcscheme_path##*/}"
	fi

	logi "$ARROW Archiving $_SCHEME ($_CONFIGURATION) with $_SDK SDK"

	### Finish update Info plist ###
	if [[ -n $INFO_PLIST_PATH ]]; then
		cp "$INFO_PLIST_PATH" "$PRODUCT_BUILD_ROOT/$(basename "$INFO_PLIST_PATH")"
	fi

	local params_file=
	if [[ $No_cache == true ]]; then
		params_file=$(get_build_params_file "$_SCHEME" -sdk "$_SDK" -archivePath "$archive_path" -derivedDataPath "$REL_TEMP_DIR/$Distribution")
	else
		params_file=$(get_build_params_file "$_SCHEME" -sdk "$_SDK" -archivePath "$archive_path")
	fi

	while read p; do params+=( "$p" ); done < $params_file

	## Disable 'build_options' because `-enable{Address,Thread}Sanitizer` options don't work on 'xcodebuild archive'
	# while read p; do params+=( "$p" ); done < <(relparser -f "$REL_CONFIG_PATH" build_options "$distribution")

	# See https://developer.apple.com/library/content/technotes/tn2215/_index.html
	params+=(INSTALL_PATH="\$(LOCAL_APPS_DIR)")

	## If there is a Pods project, PRODUCT_BUNDLE_IDENTIFIER will
	## cause 'App installation failed' by the reason why 'Bundle identifiers
	## must be unique'. Because by default 'CFBundleIdentifier
	## (aka Bundle identifier)' is $(PRODUCT_BUNDLE_IDENTIFIER) in Info.plist
	## of each pod. So This line is commented out.
	## See https://goo.gl/x1tMpQ in detail.
	# params=("${params[@]}" PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER")
	
	## If there is a Pods project, DEVELOPMENT_TEAM will cause these build errors
	##   XXXX does not support provisioning profiles, but provisioning profile 
	##   NO_SIGNING/ has been manually specified. Set the provisioning profile
	#    value to "Automatic" in the build settings editor.Â¬
	# params=("${params[@]}"  DEVELOPMENT_TEAM="$_TEAM_ID")

	xcodebuild -showBuildSettings "${params[@]}" > "$PRODUCT_BUILD_ROOT/build-settings-${_SDK}-${_CONFIGURATION}"

	params=("${params[@]}" "$@" clean archive)
	
	local logfile="$PRODUCT_BUILD_ROOT/archive.log"
	logi "$ARROW xcodebuild ${params[@]}"
	logi "Log: $logfile"

	rm -rf "${logfile}"
	if [[ ${REL_LOG_LEVEL:-undefined} =~ .*"$REL_LOG_LEVEL_VERBOSE".* ]]; then
		if [ -z $REL_LOG_FORMATTER ]; then
			xcodebuild "${params[@]}" 2>&1 |\
				tee "${logfile}"; test ${PIPESTATUS[0]} -eq 0 || return 1
		else
			xcodebuild "${params[@]}" > >(tee -a "${logfile}") 2> >(tee -a "${logfile}" >&2) |\
				${REL_LOG_FORMATTER}; test ${PIPESTATUS[0]} -eq 0 || return 1
		fi
	else
		xcodebuild "${params[@]}" > >(tee -a "${logfile}" >/dev/null) 2> >(tee -a "${logfile}" >&2) & 
		XCODEBUILD_PID=$!
		if [[ $Show_progress == true ]]; then
			print_progress_time $XCODEBUILD_PID || return 1
		else
			print_progress_time $XCODEBUILD_PID --quiet || return 1
		fi
	fi

	echo "$archive_path"
}

Distribution=
No_cache=false
Show_progress=false

Scheme=
Profile=
Quiet=false

while [ $# -ne 0 ];
do
	arg=$1
	shift
	case $arg in
	-h|--help) usage ;;
	--completions)
		if [[ $# == 0 ]]; then
			echo "${REL_DISTRIBUTIONS[@]}"
		else
			comps=(-c --progress --no-cache)
			echo "${comps[@]}"
		fi
		fin
		;;
	--progress)
		Show_progress=true
		;;
	-c)
		[[ $# != 0 ]] || usage
		configuration=$1
		shift
		;;
	--no-cache)
		No_cache=true
		;;
	-q)
		Quiet=true
		;;
	*)
		Distribution=$arg
		;;
	esac
done

[[ ${Distribution:-undefined} != undefined ]] || usage

check_distribution $Distribution

trap 'teardown_build;' EXIT INT TERM
setup_build $Distribution

data_root=$REL_RELEASE_ROOT/$Distribution/$REL_DATA_DIR
mkdir -p "$data_root"

make_archive "$PRODUCT_BUILD_ROOT/$PRODUCT_NAME.xcarchive" "$@"
