#!/usr/bin/env bash -eu
# @(#) relax: keychain utility functions

export SECURITY=/usr/bin/security
export USER_KEYCHAINS=~/Library/Keychains
export SYSTEM_KEYCHAINS=/Library/Keychains
export OS_VERSION=$(sw_vers -productVersion)

# fetch <p12> -P <password>
pkcs12_fetch_identities () {
	local password p12
	while [ $# -ne 0 ];
	do
		arg="$1"
		shift
		case $arg in
		-P)
			password="$1"
			shift
			;;
		*)
			p12="$arg"
			;;
		esac
	done

	local cert_pems=$REL_TEMP_DIR/certs.pem

	local begin_cert="-----BEGIN CERTIFICATE-----"
	local end_cert="-----END CERTIFICATE-----"
	openssl pkcs12 -info -in "$p12" -passin pass:$password -nokeys 2>/dev/null \
	| sed -n "/$begin_cert/,/$end_cert/p" \
	> ${cert_pems}

	#cat $cert_pems >&2

	local count=$(grep -e "$begin_cert" "$cert_pems" | wc -l | xargs)

	# Split certificates
	if [[ $count -gt 1  ]]; then
		csplit -f $REL_TEMP_DIR/cert "$cert_pems" "/$begin_cert/" {0} >/dev/null
	else
		cp "$cert_pems" "$REL_TEMP_DIR/cert00"
	fi

	for i in $(seq 0 $(( count - 1 )))
	do
		openssl x509 -in "$REL_TEMP_DIR/cert0$i" -noout -fingerprint \
		|  awk -F= '{ gsub(":", "", $2); print $2; }'
	done
}

# list_keychain
list_keychain () {
	find ~/Library/Keychains/* -type f -depth 0 2>/dev/null \
	| sed 's/-db//g' | grep ".*\.keychain" \
	| while IFS= read -r keychain && [[ -n $keychain ]]
	do
		keychain="${keychain//\"/}"
		echo "${keychain##*/}"
	done
	echo "System.keychain"
}

# is_exist_keychain <keychain>
is_exist_keychain () {
	if ls $USER_KEYCHAINS/"$1"* 2>/dev/null | grep -q "$1"; then
		return 0;
	fi
	if ls $SYSTEM_KEYCHAINS/"$1"* 2>/dev/null | grep -q "$1"; then
		return 0;
	fi
	return 1;
}

# can_use_keychain <keychain>
can_use_keychain () {
	if $SECURITY default-keychain | grep -q "$1"; then
		if $SECURITY list-keychains | grep -q "$1"; then
			return 0
		fi
	fi
	return 1
}

# reset_default_keychain <keychain>
reset_default_keychain () {
	$SECURITY list-keychains -s "$1"
	$SECURITY default-keychain -s "$1"
}


# set_default_keychain <keychain>
set_default_keychain () {
	$SECURITY default-keychain -s $1

	local default_keychain=$($SECURITY default-keychain | xargs) 
	if echo "$default_keychain" | grep -q $1; then
		logi "Set default keychain: $default_keychain"
	else
		die "Failed to set default keychain: $1"
	fi
}

declare -x -f pkcs12_fetch_identities list_keychain
declare -x -f set_default_keychain reset_default_keychain 
declare -x -f is_exist_keychain can_use_keychain 
