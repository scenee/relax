#!/usr/bin/env bash -eu
# @(#) relax: `validate` command

usage () {
	cat <<-EOM
	usage: ${ME} validate <ipa|app|archive>

	Print the codesign and mobileprovision information.
	You can print the embedded provisioning profile with '-v' options.
	i.e. relax -v validate <product>

	EOM
	fin
}

prepare_validate () {
	: # Do nothing now
}


validate_app () {
	local app_path="$1"

	local success=false
	local warning=0
	if test ! -d "${app_path}"; then
		die "Not found ${app_path}"
	fi

	local app_name="${1##*/}"
	local product_name=
	if [[ "$app_name" =~ (.*)\.app  ]]; then
		product_name="${BASH_REMATCH[1]}";
	fi
	logi "$ARROW Validating $product_name..."

	logi "$ARROW Check codesigning"

	logv "$ARROW Verifying $app_name"
	codesign -dv "${app_path}" 2>&1 | grep -e "Format\|Identifier\|Signed Time" | tee $REL_TEMP_DIR/codesign_info
	codesign --verify --no-strict -vvvv "${app_path}" 2>&1 | logv;
	if [[ $? = 0 ]]; then
		success=true
	else
		success=false
	fi

	local cs_app_id=$(cat $REL_TEMP_DIR/codesign_info | sed -ne "s/^Identifier=\(.*\)/\1/p")
	local cs_team_id=$(cat $REL_TEMP_DIR/codesign_info | sed -ne "s/TeamIdentifier=\(.*\)/\1/p")

	# Check embedded bundles' codesign
	while IFS= read -r bundle && [[ -n "$bundle" ]]
	do
		local bundle_name bundle_team_id bundle_temp_codesign_info
		bundle_name="${bundle##*/}"

		logv "$ARROW Verifying $bundle_name"
		if codesign --verify --no-strict -vvvv "${bundle}" 2>&1 \
			| logv; test ${PIPESTATUS[1]} -eq 0; then
			success=true
		else
			success=false
		fi

		bundle_temp_codesign_info=$(mktemp "$REL_TEMP_DIR/codesign_info.XXXXXX")

		codesign -dv "${bundle}" 2>&1 \
			| grep -e "Format\|Identifier\|Signed Time" \
			| tee $bundle_temp_codesign_info | logv

		bundle_team_id=$(cat $bundle_temp_codesign_info | sed -ne "s/^TeamIdentifier=\(.*\)/\1/p")

		if [[ $cs_team_id = $bundle_team_id ]]; then
			logv "$bundle_name matched $cs_team_id."
			success=true
		else
			logi "$ERR: Found an invalid Framework signed by a different Team ID($bundle_team_id): $bundle_name"
			success=false
		fi
	done < <(find -d "${app_path}/.." \
		\( -name "*.app" -o -name "*.appex" -o -name "*.framework" -o -name "*.dylib" \))

	if [[ $success = true ]]; then
		logi "All Embedded Frameworks matched \"$cs_team_id\"."
	fi

	if [[ $success != true ]]; then
		die "Failed codesign verification."
	fi

	# Show Info.plist
	logi "$ARROW Checking Info.plist"
	logi "$ARROW Info.plist"
	local info_plist_path info_version info_bundle_version info_bundle_identifier
	info_plist_path="$REL_TEMP_DIR/Info.plist"
	plutil -convert xml1 "${app_path}/Info.plist" -o "$info_plist_path"
	info_version=$(print_info_plist version "$info_plist_path")
	info_bundle_version=$(print_info_plist bundle_version "$info_plist_path")
	info_bundle_name=$(print_info_plist bundle_name "$info_plist_path")
	info_bundle_identifier=$(print_info_plist bundle_identifier "$info_plist_path")
	cat <<-EOM | logi
	Bundle Version: ${info_version}(${info_bundle_version})
	Bundle Name: ${info_bundle_name}
	Bundle Identifier: ${info_bundle_identifier}
	EOM
	cat "${info_plist_path}" | logv
	
	if ! [[ $cs_app_id =~ $info_bundle_identifier ]]; then
		success=false
		logi "Not match CodeSigining and Info.plist bundle identifier"
	fi

	logi "$ARROW Checking the entitlements and mobileprovision"

	# Show entitlement
	logi "$ARROW Entitlements"
	if codesign -d --entitlements :- "${app_path}" 2>/dev/null | grep ".*" | logi; test ${PIPESTATUS[1]} -eq 1; then
		success=false
		logi "$ERR Not found the Entitlements"
	else
		:
	fi

	# Show embedded provisioning profile
	logi "$ARROW Embedded Provisioning Profile"
	local mobileprovision=$REL_TEMP_DIR/embedded.mobileprovision
	relax profile dec "${app_path}/embedded.mobileprovision" -o "$mobileprovision"
	local mp_name=$(/usr/libexec/PlistBuddy -c "Print :Name" $mobileprovision)
	local mp_uuid=$(/usr/libexec/PlistBuddy -c "Print :UUID" $mobileprovision)
	local mp_team=$(/usr/libexec/PlistBuddy -c "Print :TeamName" $mobileprovision)
	local mp_team_id=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" $mobileprovision)
	local mp_cdate=$(/usr/libexec/PlistBuddy -c "Print :CreationDate" $mobileprovision)
	local mp_edate=$(/usr/libexec/PlistBuddy -c "Print :ExpirationDate" $mobileprovision)
	cat <<-EOM | logi
	Name: $mp_name
	UUID: $mp_uuid
	Team: $mp_team($mp_team_id)
	Creation Date: $mp_cdate
	Expiration Date: $mp_edate
	EOM
	# Warning for an AppStore mobileprovision
	if /usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" $mobileprovision \
		2>&1 | grep -q "Does Not Exist"; then
		if /usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" $mobileprovision \
			2>&1 | grep -q "Does Not Exist"; then
			cat <<-EOM | logi
			$WARN ${BOLD}$app_name can contain an AppStore provisioning profile.
				 ${BOLD}Please check the embedded provisioning profile with 'relax -v validate'.
			EOM
			success=false
			(( warning+=1 ))
		fi
	fi
	cat $mobileprovision | awk '{ print $0 }' | logv  # Pass `awk' to append a newline before EOF.

	# Check if archived-expanded-entitlements.xcent matches the signed entitlements
	if [[ $app_path =~ xcarchive ]]; then
		logi "$ARROW Check archived-expanded-entitlements in ${app_path##*/}"
		local xcent="$app_path/archived-expanded-entitlements.xcent"
		if [[ -f "$xcent" ]]; then
			local xcent_app_id=$(/usr/libexec/PlistBuddy -c "Print :application-identifier" "$xcent")
			cat <<-EOM | logi
			Signed entitlements: $cs_team_id.$cs_app_id
			Archived expanded entitlements: $xcent_app_id
			EOM
			if [ "$cs_team_id.$cs_app_id" != "$xcent_app_id" ]; then
				success=false
				die "Not match the signed entitlements and the archived expanded entitlements"
			fi
		fi
	fi

	logi "$ARROW Detect duplicate bundle identifiers in ${app_path##*/}"
	find "$app_path" -name "Info.plist" -mindepth 2 |\
	while IFS= read info
	do
		local new_id bundle_ids bundle_path app_name
		local bundle_info_plist_path="$REL_TEMP_DIR/Info.plist"
		plutil -convert xml1 "$info" -o "$bundle_info_plist_path"
		logd "$bundle_info_plist_path"
		new_id="$(print_info_plist bundle_identifier "$bundle_info_plist_path")"
		if [[ -n $new_id ]]; then
			bundle_path=${info##$app_path}
			app_name=${app_path##*/}
			logi "${app_name}${bundle_path}: $new_id"
			if [[ $bundle_ids =~ $new_id ]]; then
				success=false
				logi "$ERR A duplicate bundle identifier($new_id) is found in $info"
			fi
		fi
		bundle_ids+="$new_id"
	done

	# Check match codesign Team Identifier and a Team ID for the entitlements and the provisioning profile
	if [[ $mp_team_id != $cs_team_id ]]; then
		success=false
		logi "$ERR Team identifier($mp_team_id) of the embedded provisioning profile doesn't match one of the signed certificate($cs_team_id)"
	fi

	if [[ $success = true ]]; then
		logi "${GREEN}Validation Successful${NC}"
	else
		if [[ $warning -gt 0 ]]; then
			logi "${YELLOW} $(printf "%s Warning Found" $warning)"
		else
			die "Validation Failed"
		fi
	fi
}

validate_product () {
	[[ $# = 1 ]] || usage

	local product_path="${1%/}"
	local app_path
	if [[ "$product_path" =~ .*\.app  ]]; then
		logd "app: $product_path"

		[[ -d $product_path ]] ||  die "Not found $product_path"

		app_path="$1"

	elif [[ "$product_path" =~ (.*)\.xcarchive  ]]; then
		logd "archive: $product_path"

		[[ -d $product_path ]] ||  die "Not found $product_path"

		app_path="$(find "$1" -name *.app)"

	elif [[ "$product_path" =~ (.*)\.ipa ]]; then
		logd "ipa: $product_path"

		[[ -f $product_path ]] || die "Not found $1"

		unzip -q "$1" -d $REL_TEMP_DIR
		app_path="$(find "$REL_TEMP_DIR/Payload" -name *.app)"
	else
		die "Not found $1"
	fi

	if [[ ! -d "${app_path}" ]]; then
		die "Not found an app file: ${app_path}"
	fi
	validate_app "${app_path}"
}

[[ $# != 0 ]] || usage

case $1 in
-h|--help) usage ;;
esac

prepare_validate

validate_product "$@"
